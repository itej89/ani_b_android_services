package Framework;

import android.content.Context;
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.util.Log;

import org.tensorflow.contrib.android.TensorFlowInferenceInterface;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.concurrent.locks.ReentrantLock;

import Framework.Data.Delegates.VoiceDelegate;
import Framework.DataTypes.Delegates.AISTTDelegates;
import Framework.DataTypes.GlobalContext;
import Framework.Helpers.MFCC;
import FrameworkInterface.InterfaceImplementations.AIManager;

public class AudioRecorder implements AISTTDelegates {



    private VoiceDelegate speechDelegate;

    public void SetSpeechDelegate(VoiceDelegate _delegate) {
        speechDelegate = _delegate;
    }


    //Start of AISTTDelegates
    public void RecievedAnswerWithEmotion(String response, String data)
    {}
    public  void RecievedSTTBeginAck(boolean status)
    {
        if(StreamState == StreamStates.Init_Stream_Wait)
        {
            Log.d("STT_DATA", "Recieved Init ACK");
            StreamState = StreamStates.Process_Stream;
            ProcessVoiceBuffer();
        }
    }
    public  void RecievedSTTProcessingAck(boolean status)
    {
        if(StreamState == StreamStates.Process_Stream_Wait)
        {
            Log.d("STT_DATA", "Recieved Processing ACK");

            StreamState = StreamStates.Process_Stream;
            ProcessVoiceBuffer();
        }
    }
    public  void RecievedSTTFinished(String Response)
    {
        if(StreamState == StreamStates.Finish_Stream_Wait)
        {
            if(speechDelegate != null)
            {
                speechDelegate.RecievedData(Response);

            }

            StreamState = StreamStates.NA;
            Log.d("STT_DATA", "Resonse : "+Response);
        }
    }
    //End of AISTTDelegates



    public enum  StreamStates {Init_Stream, Init_Stream_Wait, Process_Stream,Process_Stream_Wait ,Finish_Stream, Finish_Stream_Wait ,NA}

    private  StreamStates StreamState = StreamStates.NA;

    public enum State {INITIALIZING, READY, RECORDING, ERROR, STOPPED};

    private short[] audioBuffer = null;

    private List<short[]> One_Sec_Buffer = null;
    private List<short[]> Inferance_Buffer = null;


    short[] recordingBuffer = new short[RECORDING_LENGTH];
    int recordingOffset = 0;

    private int source = MediaRecorder.AudioSource.VOICE_RECOGNITION;

    private int sampleRate = 0;

    private int encoder =0;

    private int nChannels = 0;

    private int bufferRead = 0;

    private int bufferSize = 0;

    private RandomAccessFile tempAudioFile = null;

    public AudioRecord audioRecorder = null;

    private State state;

    private short bSamples = 16;

    private int framePeriod;

    public  boolean IsPerformVoiceInferance = false;
    public  boolean IsPerformRecording = false;


    // The interval in which the recorded samples are output to the file
// Used only in uncompressed mode
    private static final int TIMER_INTERVAL = 120;

    volatile Thread audioBufferingThread = null;






    public AudioRecorder(Context c)
    {
        AIManager.Instance.SubScribeAISTTServer(this);

        this.sampleRate = 16000;

        this.encoder =  AudioFormat.ENCODING_PCM_16BIT;

        this.nChannels = AudioFormat.CHANNEL_IN_MONO;



        state = State.INITIALIZING;

        try
        {
/*
        String fileName = "/sdcard/XYZ/11025.wav";

        tempAudioFile = new RandomAccessFile(fileName,"rw");
*/
            framePeriod = sampleRate * TIMER_INTERVAL / 1000;

            bufferSize = framePeriod * 2 * bSamples * nChannels / 8;

            int minBuffer_size  =AudioRecord.getMinBufferSize(sampleRate, nChannels, encoder);

            if (bufferSize < minBuffer_size)
            {
                bufferSize = minBuffer_size;

                // Set frame period and timer interval accordingly
                framePeriod = bufferSize / ( 2 * bSamples * nChannels / 8 );

                Log.w(AudioRecorder.class.getName(), "Increasing buffer size to " + Integer.toString(bufferSize));
            }

            audioRecorder = new AudioRecord(source,sampleRate,nChannels,encoder,bufferSize);

            bufferSize = 800;

            audioBuffer = new short[bufferSize/2];

            audioRecorder.setRecordPositionUpdateListener(updateListener);

            audioRecorder.setPositionNotificationPeriod(framePeriod);


        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }

    private AudioRecord.OnRecordPositionUpdateListener updateListener = new AudioRecord.OnRecordPositionUpdateListener() {

        @Override
        public void onPeriodicNotification(AudioRecord recorder) {
//          Log.d(Constant.APP_LOG,"Into Periodic Notification...");


        }

    @Override
    public void onMarkerReached(AudioRecord recorder) {
        // TODO Auto-generated method stub

    }

};


    byte [] ShortToByte_Twiddle_Method(short [] input)
    {
        int short_index, byte_index;
        int iterations = input.length;

        byte [] buffer = new byte[input.length * 2];

        short_index = byte_index = 0;

        for(/*NOP*/; short_index != iterations; /*NOP*/)
        {
            buffer[byte_index]     = (byte) (input[short_index] & 0x00FF);
            buffer[byte_index + 1] = (byte) ((input[short_index] & 0xFF00) >> 8);

            ++short_index; byte_index += 2;
        }

        return buffer;
    }

    //Voice Recognition functions
    public void FinishSpeechRecognition()
    {
        StreamState = StreamStates.Finish_Stream_Wait;
        AIManager.Instance.FinishSTTStream();
    }

    public void ProcessVoiceBuffer()
    {
        int SampledFrameCount = Inferance_Buffer.size();
        if(SampledFrameCount > 0){
            try {
                StreamState = StreamStates.Process_Stream_Wait;
//                int BufferFrameCount = Inferance_Buffer.size();
//                byte[] data = new byte[bufferSize * BufferFrameCount];
//                for (int i = 0; i < BufferFrameCount; i++) {
//                    System.arraycopy(data, (i * bufferSize), Inferance_Buffer.get(i), 0, bufferSize);
//                }


                AIManager.Instance.ProcessStream(ShortToByte_Twiddle_Method(Inferance_Buffer.get(0)));
                Inferance_Buffer.remove(0);
//                for (int i = 0; i < BufferFrameCount; i++)
////                {
////
////                }

                System.gc();
                } catch(Exception e){
                    e.printStackTrace();
                }
            }
            else
            {
                    StreamState = StreamStates.Finish_Stream_Wait;
                    AIManager.Instance.FinishSTTStream();
                    Inferance_Buffer.clear();
                    IsPerformVoiceInferance = false;
            }
    }

    public  boolean StartRecognizingSpeech()
    {
        if(!IsPerformVoiceInferance &&  StreamState == StreamStates.NA) {
            IsPerformVoiceInferance = true;
            StreamState = StreamStates.Init_Stream_Wait;
            AIManager.Instance.InitializeSTTStream();
            return true;
        }
        else
            return false;
    }
    //End of Voice Recognition fucntions


    //Wake Word Detection
    private static final int SAMPLE_RATE = 16000;
    //Total length of recording used for detection
    private static final int SAMPLE_DURATION_MS = 1500;
    private static final int RECORDING_LENGTH = (int) (SAMPLE_RATE * SAMPLE_DURATION_MS / 1000);

    //Total Number of samples in a recording used for detection ===> 1.5sec delay + "hey A.n.i";
    //Same as RECORDING_LENGTH
    private  static  final int Recording_Window_Sample_length = 24000; // SAMPLE_RATE * 1.5;
    private static final int Recording_Window_hop_Legth = 800; //SAMPLE_RATE * 0.05;
    private static final int Recording_Window_Sliding_Legth = 1600; //SAMPLE_RATE * 0.1;

    int AccuracyCounter = 0;

    //MFCC java library.
    MFCC mfccConvert = new MFCC();

    boolean shouldContinueRecognition = true;
    boolean IsSearchingWakeWord = false;
    private Thread recognitionThread;
    private final ReentrantLock recordingBufferLock = new ReentrantLock();
    private static TensorFlowInferenceInterface inferenceInterface = new TensorFlowInferenceInterface(GlobalContext.context.getAssets(),"hey_Ani.pb");

    public  boolean StartWakeWordDetection() {

         if(!IsPerformVoiceInferance) {

             IsPerformVoiceInferance = true;
             if(IsSearchingWakeWord)
             {
                 shouldContinueRecognition = false;
                 while (IsSearchingWakeWord) {
                     try {
                         Thread.sleep(1);
                     } catch (InterruptedException e) {
                         e.printStackTrace();
                     }
                 }
             }
             shouldContinueRecognition = true;
             AccuracyCounter = 0;

             IsSearchingWakeWord = true;
             recognitionThread =
                     new Thread(
                             new Runnable() {
                                 @Override
                                 public void run() {

                                     DetectWakeWord();

                                 }
                             });
             recognitionThread.start();
             return true;

         }
         else
             return false;
    }

    private void DetectWakeWord() {


        short[] inputBuffer = new short[Recording_Window_Sample_length*10];
        float[] mfccBuffer = new float[29 * 13];
        int FirstFrameLength =0;
        try {
            while (shouldContinueRecognition) {


                double[] doubleInputBuffer = new double[Recording_Window_Sliding_Legth];
                //{3.0517578125E-4,3.0517578125E-4,2.74658203125E-4,2.44140625E-4,3.0517578125E-4,4.2724609375E-4,3.662109375E-4,3.0517578125E-4,1.8310546875E-4,6.103515625E-5,6.103515625E-5,0.0,0.0,0.0,-6.103515625E-5,-6.103515625E-5,-9.1552734375E-5,-1.8310546875E-4,-1.52587890625E-4,3.0517578125E-5,1.52587890625E-4,1.52587890625E-4,1.220703125E-4,1.220703125E-4,1.220703125E-4,1.220703125E-4,3.0517578125E-5,1.52587890625E-4,2.44140625E-4,3.662109375E-4,3.96728515625E-4,1.8310546875E-4,1.8310546875E-4,1.52587890625E-4,1.220703125E-4,1.52587890625E-4,2.44140625E-4,3.0517578125E-4,4.8828125E-4,5.4931640625E-4,4.2724609375E-4,5.4931640625E-4,7.62939453125E-4,8.85009765625E-4,8.544921875E-4,8.85009765625E-4,9.765625E-4,8.85009765625E-4,7.32421875E-4,5.4931640625E-4,5.18798828125E-4,4.8828125E-4,6.40869140625E-4,6.103515625E-4,6.40869140625E-4,6.40869140625E-4,6.40869140625E-4,4.8828125E-4,3.96728515625E-4,6.40869140625E-4,6.40869140625E-4,6.7138671875E-4,7.62939453125E-4,7.32421875E-4,6.103515625E-4,5.4931640625E-4,4.2724609375E-4,2.44140625E-4,2.44140625E-4,3.0517578125E-4,4.8828125E-4,6.40869140625E-4,5.18798828125E-4,5.18798828125E-4,4.2724609375E-4,1.8310546875E-4,6.103515625E-5,3.0517578125E-5,3.0517578125E-5,0.0,6.103515625E-5,6.103515625E-5,1.220703125E-4,-6.103515625E-5,-1.52587890625E-4,-3.35693359375E-4,-3.0517578125E-4,-1.8310546875E-4,-9.1552734375E-5,6.103515625E-5,1.220703125E-4,2.44140625E-4,0.0,-2.13623046875E-4,-4.2724609375E-4,-3.35693359375E-4,-3.0517578125E-4,-1.52587890625E-4,-6.103515625E-5,-9.1552734375E-5,-1.8310546875E-4,-3.35693359375E-4,-3.0517578125E-4,-2.13623046875E-4,-1.52587890625E-4,-1.52587890625E-4,-9.1552734375E-5,-3.0517578125E-4,-3.96728515625E-4,-5.4931640625E-4,-5.79833984375E-4,-5.4931640625E-4,-4.57763671875E-4,-3.96728515625E-4,-5.18798828125E-4,-4.2724609375E-4,-4.57763671875E-4,-3.96728515625E-4,-5.18798828125E-4,-4.2724609375E-4,-4.2724609375E-4,-6.40869140625E-4,-6.40869140625E-4,-5.79833984375E-4,-5.79833984375E-4,-6.40869140625E-4,-5.18798828125E-4,-5.79833984375E-4,-5.18798828125E-4,-6.40869140625E-4,-6.40869140625E-4,-5.79833984375E-4,-7.62939453125E-4,-5.18798828125E-4,-3.96728515625E-4,-3.35693359375E-4,-1.8310546875E-4,-2.74658203125E-4,-3.96728515625E-4,-3.96728515625E-4,-4.2724609375E-4,-4.57763671875E-4,-5.18798828125E-4,-4.57763671875E-4,-5.18798828125E-4,-4.2724609375E-4,-3.35693359375E-4,-3.0517578125E-4,-3.35693359375E-4,-4.2724609375E-4,-6.7138671875E-4,-8.85009765625E-4,-7.62939453125E-4,-7.01904296875E-4,-6.40869140625E-4,-5.18798828125E-4,-3.0517578125E-4,-3.35693359375E-4,-5.18798828125E-4,-5.4931640625E-4,-6.7138671875E-4,-6.7138671875E-4,-7.01904296875E-4,-6.40869140625E-4,-5.79833984375E-4,-5.4931640625E-4,-3.35693359375E-4,-1.8310546875E-4,-1.8310546875E-4,-2.13623046875E-4,-2.13623046875E-4,-2.13623046875E-4,-9.1552734375E-5,-1.52587890625E-4,-3.0517578125E-4,-3.0517578125E-4,-3.0517578125E-4,-3.0517578125E-4,-3.0517578125E-4,-1.8310546875E-4,-2.13623046875E-4,-1.52587890625E-4,-9.1552734375E-5,-2.74658203125E-4,-6.103515625E-5,-6.103515625E-5,-6.103515625E-5,0.0,-6.103515625E-5,-6.103515625E-5,-3.0517578125E-4,-5.18798828125E-4,-5.18798828125E-4,-4.57763671875E-4,-5.18798828125E-4,-5.4931640625E-4,-5.18798828125E-4,-4.57763671875E-4,-4.2724609375E-4,-4.57763671875E-4,-3.35693359375E-4,-3.35693359375E-4,-4.2724609375E-4,-4.2724609375E-4,-5.18798828125E-4,-5.79833984375E-4,-6.40869140625E-4,-5.79833984375E-4,-5.18798828125E-4,-5.18798828125E-4,-4.57763671875E-4,-4.2724609375E-4,-5.79833984375E-4,-7.62939453125E-4,-7.01904296875E-4,-5.79833984375E-4,-5.4931640625E-4,-4.2724609375E-4,-5.18798828125E-4,-6.40869140625E-4,-6.7138671875E-4,-7.62939453125E-4,-7.9345703125E-4,-6.7138671875E-4,-4.57763671875E-4,-4.57763671875E-4,-3.0517578125E-4,-1.8310546875E-4,-9.1552734375E-5,-6.103515625E-5,-6.103515625E-5,-1.52587890625E-4,-1.52587890625E-4,-2.74658203125E-4,-3.96728515625E-4,-1.8310546875E-4,-2.74658203125E-4,6.103515625E-5,3.662109375E-4,2.44140625E-4,2.44140625E-4,1.52587890625E-4,2.44140625E-4,3.662109375E-4,3.662109375E-4,4.2724609375E-4,3.662109375E-4,3.96728515625E-4,2.74658203125E-4,2.44140625E-4,2.74658203125E-4,3.0517578125E-4,4.8828125E-4,6.103515625E-4,6.7138671875E-4,6.7138671875E-4,6.7138671875E-4,5.4931640625E-4,3.96728515625E-4,3.0517578125E-4,3.0517578125E-4,3.0517578125E-4,3.662109375E-4,2.74658203125E-4,3.662109375E-4,3.662109375E-4,2.44140625E-4,2.44140625E-4,1.220703125E-4,6.103515625E-5,3.0517578125E-5,6.103515625E-5,1.8310546875E-4,0.0,-6.103515625E-5,-1.52587890625E-4,-3.35693359375E-4,-3.96728515625E-4,-4.2724609375E-4,-3.0517578125E-4,-2.13623046875E-4,3.0517578125E-5,2.74658203125E-4,2.74658203125E-4,2.74658203125E-4,1.52587890625E-4,1.52587890625E-4,1.52587890625E-4,1.52587890625E-4,1.220703125E-4,3.0517578125E-5,1.220703125E-4,-1.52587890625E-4,0.0,1.52587890625E-4,1.52587890625E-4,6.103515625E-5,3.0517578125E-5,-2.13623046875E-4,-1.52587890625E-4,-9.1552734375E-5,-6.103515625E-5,1.52587890625E-4,3.96728515625E-4,4.8828125E-4,3.662109375E-4,4.2724609375E-4,4.8828125E-4,5.4931640625E-4,6.103515625E-4,7.32421875E-4,6.7138671875E-4,6.40869140625E-4,6.103515625E-4,5.4931640625E-4,5.4931640625E-4,4.2724609375E-4,3.662109375E-4,2.74658203125E-4,2.74658203125E-4,2.74658203125E-4,5.18798828125E-4,4.8828125E-4,7.32421875E-4,9.1552734375E-4,8.85009765625E-4,9.765625E-4,7.32421875E-4,6.40869140625E-4,5.4931640625E-4,4.2724609375E-4,3.662109375E-4,4.2724609375E-4,4.2724609375E-4,3.96728515625E-4,4.8828125E-4,5.18798828125E-4,5.4931640625E-4,4.8828125E-4,3.662109375E-4,3.96728515625E-4,3.0517578125E-4,3.662109375E-4,2.74658203125E-4,1.220703125E-4,6.103515625E-5,1.52587890625E-4,1.52587890625E-4,1.220703125E-4,1.52587890625E-4,-6.103515625E-5,-2.13623046875E-4,-3.96728515625E-4,-7.01904296875E-4,-8.23974609375E-4,-9.1552734375E-4,-0.001068115234375,-0.001129150390625,-0.001068115234375,-0.001007080078125,-9.46044921875E-4,-9.46044921875E-4,-8.23974609375E-4,-7.9345703125E-4,-8.23974609375E-4,-7.62939453125E-4,-6.40869140625E-4,-5.79833984375E-4,-4.2724609375E-4,-4.57763671875E-4,-5.18798828125E-4,-5.79833984375E-4,-9.1552734375E-4,-9.1552734375E-4,-8.85009765625E-4,-7.62939453125E-4,-5.18798828125E-4,-3.35693359375E-4,-3.0517578125E-4,-3.0517578125E-4,-2.13623046875E-4,-3.96728515625E-4,-5.4931640625E-4,-5.4931640625E-4,-6.40869140625E-4,-3.35693359375E-4,-9.1552734375E-5,3.0517578125E-5,1.52587890625E-4,1.220703125E-4,1.220703125E-4,-9.1552734375E-5,0.0,0.0,1.8310546875E-4,3.96728515625E-4,4.8828125E-4,5.18798828125E-4,4.2724609375E-4,3.662109375E-4,2.44140625E-4,3.96728515625E-4,4.2724609375E-4,5.18798828125E-4,5.4931640625E-4,6.40869140625E-4,7.32421875E-4,7.62939453125E-4,7.9345703125E-4,7.9345703125E-4,6.7138671875E-4,5.18798828125E-4,2.44140625E-4,6.103515625E-5,-9.1552734375E-5,-3.0517578125E-4,-1.8310546875E-4,-6.103515625E-5,-6.103515625E-5,6.103515625E-5,1.220703125E-4,0.0,1.220703125E-4,3.0517578125E-5,-1.52587890625E-4,-1.52587890625E-4,-1.8310546875E-4,-9.1552734375E-5,-1.8310546875E-4,-3.35693359375E-4,-4.2724609375E-4,-4.57763671875E-4,-3.96728515625E-4,-2.74658203125E-4,-3.35693359375E-4,-3.35693359375E-4,-1.52587890625E-4,-3.35693359375E-4,-3.0517578125E-4,-3.35693359375E-4,-3.35693359375E-4,-2.13623046875E-4,-1.8310546875E-4,-2.74658203125E-4,-4.2724609375E-4,-5.18798828125E-4,-4.57763671875E-4,-3.35693359375E-4,-2.74658203125E-4,-2.13623046875E-4,-3.35693359375E-4,-2.74658203125E-4,-2.13623046875E-4,-4.2724609375E-4,-3.0517578125E-4,-2.74658203125E-4,-4.2724609375E-4,-2.74658203125E-4,-2.13623046875E-4,-6.103515625E-5,1.220703125E-4,2.44140625E-4,1.52587890625E-4,2.44140625E-4,1.220703125E-4,3.0517578125E-5,-6.103515625E-5,-2.74658203125E-4,-2.74658203125E-4,-3.96728515625E-4,-3.96728515625E-4,-4.2724609375E-4,-3.0517578125E-4,-4.57763671875E-4,-5.4931640625E-4,-5.4931640625E-4,-4.57763671875E-4,-2.74658203125E-4,-6.103515625E-5,1.52587890625E-4,1.220703125E-4,1.52587890625E-4,1.52587890625E-4,1.220703125E-4,3.0517578125E-5,0.0,1.220703125E-4,-6.103515625E-5,-9.1552734375E-5,-1.8310546875E-4,-4.57763671875E-4,-5.79833984375E-4,-5.79833984375E-4,-8.23974609375E-4,-9.1552734375E-4,-7.9345703125E-4,-8.23974609375E-4,-7.9345703125E-4,-6.7138671875E-4,-5.4931640625E-4,-5.4931640625E-4,-6.40869140625E-4,-5.18798828125E-4,-3.96728515625E-4,-1.52587890625E-4,0.0,3.0517578125E-5,-1.52587890625E-4,-3.35693359375E-4,-5.18798828125E-4,-7.62939453125E-4,-7.9345703125E-4,-7.9345703125E-4,-7.62939453125E-4,-8.23974609375E-4,-8.23974609375E-4,-6.7138671875E-4,-7.01904296875E-4,-6.7138671875E-4,-6.7138671875E-4,-5.4931640625E-4,-3.96728515625E-4,-4.2724609375E-4,-4.2724609375E-4,-5.18798828125E-4,-5.79833984375E-4,-5.18798828125E-4,-3.0517578125E-4,-2.74658203125E-4,-9.1552734375E-5,6.103515625E-5,3.0517578125E-4,4.8828125E-4,5.4931640625E-4,6.103515625E-4,5.18798828125E-4,4.2724609375E-4,3.96728515625E-4,3.662109375E-4,3.662109375E-4,3.96728515625E-4,3.96728515625E-4,4.2724609375E-4,5.4931640625E-4,6.103515625E-4,6.40869140625E-4,6.7138671875E-4,6.7138671875E-4,6.40869140625E-4,6.40869140625E-4,4.2724609375E-4,1.8310546875E-4,3.0517578125E-5,-1.52587890625E-4,-3.0517578125E-4,-3.0517578125E-4,-3.35693359375E-4,-2.13623046875E-4,-1.52587890625E-4,3.0517578125E-5,1.220703125E-4,0.0,-1.52587890625E-4,-2.74658203125E-4,-3.0517578125E-4,-1.8310546875E-4,3.0517578125E-5,-1.8310546875E-4,-3.35693359375E-4,-5.4931640625E-4,-6.40869140625E-4,-4.2724609375E-4,-4.57763671875E-4,-4.2724609375E-4,-2.13623046875E-4,-3.0517578125E-4,-3.96728515625E-4,-4.2724609375E-4,-5.79833984375E-4,-6.40869140625E-4,-7.9345703125E-4,-7.62939453125E-4,-5.79833984375E-4,-7.01904296875E-4,-6.40869140625E-4,-6.40869140625E-4,-7.01904296875E-4,-5.4931640625E-4,-4.57763671875E-4,-3.96728515625E-4,-2.13623046875E-4,-1.52587890625E-4,-6.103515625E-5,1.220703125E-4,2.44140625E-4,2.74658203125E-4,3.662109375E-4,4.2724609375E-4,3.96728515625E-4,3.662109375E-4,3.662109375E-4,1.52587890625E-4,-6.103515625E-5,-6.103515625E-5,-9.1552734375E-5,-1.52587890625E-4,-1.52587890625E-4,-9.1552734375E-5,-9.1552734375E-5,-6.103515625E-5,3.0517578125E-5,-9.1552734375E-5,-2.13623046875E-4,-2.13623046875E-4,-6.103515625E-5,0.0,1.220703125E-4,3.96728515625E-4,4.8828125E-4,5.4931640625E-4,6.103515625E-4,7.32421875E-4,7.32421875E-4,7.32421875E-4,6.103515625E-4,4.8828125E-4,4.8828125E-4,3.662109375E-4,2.44140625E-4,1.8310546875E-4,6.103515625E-5,-9.1552734375E-5,6.103515625E-5,2.44140625E-4,3.96728515625E-4,4.2724609375E-4,3.662109375E-4,2.74658203125E-4,1.52587890625E-4,1.220703125E-4,1.220703125E-4,6.103515625E-5,2.74658203125E-4,2.74658203125E-4,4.2724609375E-4,7.32421875E-4,8.544921875E-4,9.1552734375E-4,8.85009765625E-4,9.1552734375E-4,9.765625E-4,9.765625E-4,8.85009765625E-4,7.62939453125E-4,7.62939453125E-4,8.544921875E-4,6.40869140625E-4,4.8828125E-4,5.4931640625E-4,5.4931640625E-4,4.2724609375E-4,3.662109375E-4,3.662109375E-4,3.96728515625E-4,5.18798828125E-4,3.96728515625E-4,3.96728515625E-4,3.96728515625E-4,6.103515625E-4,7.32421875E-4,7.62939453125E-4,7.9345703125E-4,7.62939453125E-4,7.9345703125E-4,6.7138671875E-4,6.7138671875E-4,5.4931640625E-4,4.2724609375E-4,4.8828125E-4,5.4931640625E-4,6.7138671875E-4,6.103515625E-4,5.4931640625E-4,4.2724609375E-4,3.662109375E-4,4.2724609375E-4,2.44140625E-4,1.52587890625E-4,-6.103515625E-5,-1.52587890625E-4,-1.8310546875E-4,-1.8310546875E-4,-6.103515625E-5,3.0517578125E-5,2.74658203125E-4,2.44140625E-4,1.52587890625E-4,0.0,-1.8310546875E-4,-3.96728515625E-4,-3.0517578125E-4,-4.2724609375E-4,-5.4931640625E-4,-5.4931640625E-4,-8.23974609375E-4,-7.9345703125E-4,-7.9345703125E-4,-6.40869140625E-4,-5.79833984375E-4,-5.18798828125E-4,-4.2724609375E-4,-7.62939453125E-4,-7.9345703125E-4,-8.23974609375E-4,-9.1552734375E-4,-8.85009765625E-4,-8.23974609375E-4,-9.1552734375E-4,-8.85009765625E-4,-7.9345703125E-4,-7.01904296875E-4,-5.79833984375E-4,-4.57763671875E-4,-4.57763671875E-4,-4.57763671875E-4,-1.52587890625E-4,-1.8310546875E-4,-3.0517578125E-4,-3.96728515625E-4,-3.35693359375E-4,-3.96728515625E-4,-2.74658203125E-4,-6.103515625E-5,0.0,1.220703125E-4,2.44140625E-4,1.220703125E-4,-1.52587890625E-4,-2.13623046875E-4,-2.13623046875E-4,-3.35693359375E-4,-5.18798828125E-4,-5.18798828125E-4,-7.01904296875E-4,-7.01904296875E-4,-7.9345703125E-4,-9.46044921875E-4,-9.46044921875E-4,-0.001068115234375,-0.00103759765625,-9.46044921875E-4,-9.1552734375E-4,-8.23974609375E-4,-6.40869140625E-4,-5.79833984375E-4,-7.9345703125E-4,-8.23974609375E-4,-7.9345703125E-4,-7.01904296875E-4,-7.01904296875E-4,-7.9345703125E-4,-9.46044921875E-4,-0.00115966796875,-0.001190185546875,-0.00115966796875,-0.00115966796875,-0.001190185546875,-0.001190185546875,-0.001190185546875,-0.001251220703125,-0.00140380859375,-0.001495361328125,-0.001556396484375,-0.00152587890625,-0.00152587890625,-0.00152587890625,-0.00152587890625,-0.001495361328125,-0.001495361328125,-0.00115966796875,-9.46044921875E-4,-7.01904296875E-4,-5.18798828125E-4,-5.79833984375E-4,-4.2724609375E-4,-4.57763671875E-4,-3.96728515625E-4,-4.57763671875E-4,-4.2724609375E-4,-4.2724609375E-4,-5.4931640625E-4,-5.18798828125E-4,-5.4931640625E-4,-4.57763671875E-4,-3.96728515625E-4,-1.8310546875E-4,-9.1552734375E-5,-1.8310546875E-4,-1.8310546875E-4,-1.52587890625E-4,-2.74658203125E-4,-4.2724609375E-4,-5.79833984375E-4,-5.18798828125E-4,-4.57763671875E-4,-5.18798828125E-4,-3.96728515625E-4,-3.35693359375E-4,-1.8310546875E-4,-1.52587890625E-4,-9.1552734375E-5,3.0517578125E-5,1.8310546875E-4,3.96728515625E-4,3.0517578125E-4,1.8310546875E-4,3.0517578125E-5,0.0,-1.8310546875E-4,-1.52587890625E-4,-1.8310546875E-4,-3.35693359375E-4,-5.4931640625E-4,-6.40869140625E-4,-5.4931640625E-4,-4.57763671875E-4,-2.74658203125E-4,3.0517578125E-5,1.220703125E-4,0.0,6.103515625E-5,0.0,-6.103515625E-5,1.220703125E-4,2.74658203125E-4,5.18798828125E-4,6.103515625E-4,7.62939453125E-4,7.9345703125E-4,6.7138671875E-4,5.18798828125E-4,3.96728515625E-4,4.2724609375E-4,4.2724609375E-4,6.7138671875E-4,6.7138671875E-4,4.8828125E-4,4.2724609375E-4,3.96728515625E-4,2.74658203125E-4,1.8310546875E-4,1.220703125E-4,3.0517578125E-4,4.8828125E-4,5.18798828125E-4,5.4931640625E-4,4.8828125E-4,4.8828125E-4,3.96728515625E-4,4.8828125E-4,4.2724609375E-4,5.4931640625E-4,6.40869140625E-4,7.9345703125E-4,9.765625E-4,0.001007080078125,0.00103759765625,0.0010986328125,0.00115966796875,0.0010986328125,0.001007080078125,0.001220703125,0.00146484375,0.00146484375,0.00146484375,0.00128173828125,0.0010986328125,0.00103759765625,7.9345703125E-4,7.32421875E-4,6.7138671875E-4,6.103515625E-4,6.40869140625E-4,6.7138671875E-4,6.7138671875E-4,7.32421875E-4,6.103515625E-4,6.103515625E-4,6.40869140625E-4,6.7138671875E-4,7.32421875E-4,6.7138671875E-4,6.40869140625E-4,6.103515625E-4,6.40869140625E-4,7.32421875E-4,6.40869140625E-4,6.7138671875E-4,7.32421875E-4,6.7138671875E-4,5.4931640625E-4,3.662109375E-4,2.74658203125E-4,2.74658203125E-4,2.74658203125E-4,2.74658203125E-4,4.8828125E-4,6.40869140625E-4,7.32421875E-4,7.62939453125E-4,6.7138671875E-4,6.103515625E-4,5.4931640625E-4,4.8828125E-4,4.8828125E-4,4.2724609375E-4,3.96728515625E-4,3.0517578125E-4,1.52587890625E-4,6.103515625E-5,1.52587890625E-4,2.44140625E-4,2.44140625E-4,3.0517578125E-4,3.0517578125E-4,1.52587890625E-4,2.44140625E-4,2.44140625E-4,1.8310546875E-4,2.44140625E-4,1.8310546875E-4,2.74658203125E-4,2.74658203125E-4,1.8310546875E-4,1.8310546875E-4,3.0517578125E-5,-2.13623046875E-4,-4.2724609375E-4,-3.96728515625E-4,-4.2724609375E-4,-3.96728515625E-4,-1.52587890625E-4,0.0,-9.1552734375E-5,-9.1552734375E-5,-2.74658203125E-4,-4.57763671875E-4,-5.4931640625E-4,-5.4931640625E-4,-4.57763671875E-4,-3.35693359375E-4,-4.2724609375E-4,-3.0517578125E-4,-2.13623046875E-4,-2.74658203125E-4,-2.13623046875E-4,-9.1552734375E-5,3.0517578125E-5,1.52587890625E-4,3.0517578125E-5,1.52587890625E-4,2.44140625E-4,3.0517578125E-5,0.0,-1.52587890625E-4,-9.1552734375E-5,-6.103515625E-5,-6.103515625E-5,-2.74658203125E-4,-3.35693359375E-4,-4.2724609375E-4,-3.35693359375E-4,-2.13623046875E-4,-1.8310546875E-4,-6.103515625E-5,3.0517578125E-5,3.0517578125E-5,0.0,-6.103515625E-5,-1.8310546875E-4,-2.13623046875E-4,-3.0517578125E-4,-3.96728515625E-4,-2.74658203125E-4,-3.0517578125E-4,-3.0517578125E-4,-2.74658203125E-4,-2.74658203125E-4,-3.35693359375E-4,-3.0517578125E-4,-3.35693359375E-4,-4.57763671875E-4,-4.2724609375E-4,-4.57763671875E-4,-5.4931640625E-4,-5.4931640625E-4,-4.57763671875E-4,-5.79833984375E-4,-6.40869140625E-4,-5.79833984375E-4,-3.96728515625E-4,-3.35693359375E-4,-3.35693359375E-4,-1.8310546875E-4,-6.103515625E-5,-6.103515625E-5,-9.1552734375E-5,-1.8310546875E-4,-1.8310546875E-4,-6.103515625E-5,-6.103515625E-5,-1.8310546875E-4,-3.0517578125E-4,-3.0517578125E-4,-3.96728515625E-4,-3.96728515625E-4,-3.35693359375E-4,-2.74658203125E-4,-3.0517578125E-4,-4.57763671875E-4,-5.79833984375E-4,-8.23974609375E-4,-8.23974609375E-4,-0.001007080078125,-0.001068115234375,-9.1552734375E-4,-9.46044921875E-4,-9.46044921875E-4,-9.1552734375E-4,-8.85009765625E-4,-0.001007080078125,-0.001007080078125,-0.001068115234375,-0.001190185546875,-0.001251220703125,-0.001434326171875,-0.001312255859375,-0.001251220703125,-0.001068115234375,-7.01904296875E-4,-7.9345703125E-4,-7.9345703125E-4,-8.85009765625E-4,-0.001068115234375,-0.001190185546875,-0.001434326171875,-0.001434326171875,-0.001434326171875,-0.00140380859375,-0.001312255859375,-0.00140380859375,-0.00128173828125,-0.001251220703125,-0.00103759765625,-0.001068115234375,-0.001129150390625,-0.00103759765625,-0.001190185546875,-0.00128173828125,-0.00128173828125,-0.00115966796875,-0.001129150390625,-0.001007080078125,-0.001007080078125,-8.85009765625E-4,-7.62939453125E-4,-7.01904296875E-4,-5.18798828125E-4,-7.01904296875E-4,-6.7138671875E-4,-7.62939453125E-4,-9.1552734375E-4,-8.23974609375E-4,-7.9345703125E-4,-6.7138671875E-4,-6.7138671875E-4,-6.7138671875E-4,-7.62939453125E-4,-7.9345703125E-4,-7.9345703125E-4,-7.01904296875E-4,-6.40869140625E-4,-5.4931640625E-4,-4.57763671875E-4,-4.2724609375E-4,-3.96728515625E-4,-3.96728515625E-4,-2.13623046875E-4,-9.1552734375E-5,-6.103515625E-5,1.220703125E-4,3.0517578125E-5,0.0,3.0517578125E-5,6.103515625E-5,-9.1552734375E-5,3.0517578125E-5,1.52587890625E-4,0.0,3.0517578125E-5,3.0517578125E-5,1.52587890625E-4,1.8310546875E-4,3.0517578125E-4,3.96728515625E-4,6.103515625E-4,6.103515625E-4,5.4931640625E-4,6.103515625E-4,5.18798828125E-4,5.18798828125E-4,3.662109375E-4,5.18798828125E-4,6.103515625E-4,6.40869140625E-4,7.62939453125E-4,8.85009765625E-4,0.001007080078125,0.001220703125,0.00128173828125,0.001220703125,0.001220703125,0.0010986328125,8.85009765625E-4,7.9345703125E-4,8.85009765625E-4,8.85009765625E-4,9.1552734375E-4,8.544921875E-4,6.40869140625E-4,4.2724609375E-4,3.0517578125E-4,3.0517578125E-4,3.0517578125E-4,3.96728515625E-4,6.103515625E-4,6.7138671875E-4,6.7138671875E-4,4.8828125E-4,2.74658203125E-4,3.0517578125E-4,-9.1552734375E-5,-3.0517578125E-4,-3.96728515625E-4,-3.96728515625E-4,-9.1552734375E-5,0.0,-9.1552734375E-5,6.103515625E-5,2.74658203125E-4,4.2724609375E-4,5.18798828125E-4,5.18798828125E-4,5.18798828125E-4,4.2724609375E-4,2.44140625E-4,-6.103515625E-5,-2.74658203125E-4,-2.74658203125E-4,-9.1552734375E-5,3.0517578125E-5,2.44140625E-4,2.74658203125E-4,3.0517578125E-4,5.18798828125E-4,4.8828125E-4,3.96728515625E-4,4.8828125E-4,5.18798828125E-4,6.40869140625E-4,6.40869140625E-4,6.7138671875E-4,6.7138671875E-4,6.7138671875E-4,6.7138671875E-4,7.62939453125E-4,7.32421875E-4,7.62939453125E-4,7.62939453125E-4,8.544921875E-4,8.85009765625E-4,8.544921875E-4,9.765625E-4,9.765625E-4,8.544921875E-4,7.62939453125E-4,6.103515625E-4,5.18798828125E-4,6.103515625E-4,5.4931640625E-4,6.40869140625E-4,8.85009765625E-4,0.001007080078125,9.1552734375E-4,6.7138671875E-4,5.18798828125E-4,3.662109375E-4,3.0517578125E-5,3.0517578125E-5,-1.8310546875E-4,-1.52587890625E-4,1.220703125E-4,3.0517578125E-4,3.0517578125E-4,3.662109375E-4,3.662109375E-4,4.2724609375E-4,4.2724609375E-4,3.96728515625E-4,3.96728515625E-4,2.44140625E-4,3.96728515625E-4,2.74658203125E-4,6.103515625E-5,-9.1552734375E-5,6.103515625E-5,1.8310546875E-4,1.52587890625E-4,2.44140625E-4,2.44140625E-4,1.52587890625E-4,1.8310546875E-4,1.8310546875E-4,3.0517578125E-5,-9.1552734375E-5,3.0517578125E-5,0.0,1.52587890625E-4,1.52587890625E-4,1.8310546875E-4,2.44140625E-4,2.74658203125E-4,2.44140625E-4,2.44140625E-4,4.2724609375E-4,4.8828125E-4,6.7138671875E-4,6.7138671875E-4,7.9345703125E-4,7.9345703125E-4,6.103515625E-4,6.7138671875E-4,4.8828125E-4,2.74658203125E-4,2.74658203125E-4,3.0517578125E-4,3.662109375E-4,4.2724609375E-4,5.18798828125E-4,5.4931640625E-4,4.2724609375E-4,3.0517578125E-4,3.0517578125E-4,3.0517578125E-4,1.52587890625E-4,3.0517578125E-5,0.0,-1.52587890625E-4,-3.35693359375E-4,-3.96728515625E-4,-4.57763671875E-4,-3.96728515625E-4,-3.0517578125E-4,-3.0517578125E-4,-3.0517578125E-4,-2.74658203125E-4,-3.0517578125E-4,-3.96728515625E-4,-6.7138671875E-4,-8.85009765625E-4,-9.46044921875E-4,-0.001068115234375,-0.001068115234375,-0.001129150390625,-0.001068115234375,-0.001312255859375,-0.00140380859375,-0.00140380859375,-0.00152587890625,-0.00152587890625,-0.001495361328125,-0.001373291015625,-0.001434326171875,-0.001373291015625,-0.001556396484375,-0.00140380859375,-0.00128173828125,-0.001251220703125,-0.00115966796875,-0.001251220703125,-0.00128173828125,-0.00140380859375,-0.00152587890625,-0.00164794921875,-0.001678466796875,-0.001556396484375,-0.001617431640625,-0.001434326171875,-0.00128173828125,-0.00140380859375,-0.001373291015625,-0.001129150390625,-8.85009765625E-4,-7.9345703125E-4,-6.7138671875E-4,-6.40869140625E-4,-7.01904296875E-4,-6.7138671875E-4,-6.7138671875E-4,-7.62939453125E-4,-8.85009765625E-4,-7.01904296875E-4,-7.01904296875E-4,-7.62939453125E-4,-5.4931640625E-4,-4.2724609375E-4,-3.0517578125E-4,-2.13623046875E-4,-2.13623046875E-4,-3.0517578125E-4,-4.2724609375E-4,-5.18798828125E-4,-5.4931640625E-4,-6.40869140625E-4,-7.01904296875E-4,-6.7138671875E-4,-7.62939453125E-4,-7.9345703125E-4,-7.9345703125E-4,-7.62939453125E-4,-5.79833984375E-4,-4.57763671875E-4,-4.2724609375E-4,-3.96728515625E-4,-3.35693359375E-4,-3.0517578125E-4,-2.74658203125E-4,-3.0517578125E-4,-3.35693359375E-4,-3.0517578125E-4,-3.35693359375E-4,-2.74658203125E-4,-3.0517578125E-4,-2.13623046875E-4,-9.1552734375E-5,-9.1552734375E-5,6.103515625E-5,3.0517578125E-5,-6.103515625E-5,-9.1552734375E-5,-2.74658203125E-4,-9.1552734375E-5,-1.8310546875E-4,-1.8310546875E-4,0.0,-9.1552734375E-5,-1.8310546875E-4,-9.1552734375E-5,0.0,1.220703125E-4,3.0517578125E-4,3.96728515625E-4,5.4931640625E-4,4.8828125E-4,4.8828125E-4,5.18798828125E-4,3.96728515625E-4,3.96728515625E-4,3.0517578125E-4,2.74658203125E-4,2.44140625E-4,1.8310546875E-4,6.103515625E-5,1.52587890625E-4,1.8310546875E-4,2.74658203125E-4,3.96728515625E-4,3.662109375E-4,3.662109375E-4,3.0517578125E-4,2.44140625E-4,1.52587890625E-4,1.220703125E-4,1.220703125E-4,6.103515625E-5,6.103515625E-5,2.44140625E-4,3.0517578125E-4,2.74658203125E-4,2.74658203125E-4,3.0517578125E-4,4.2724609375E-4,5.18798828125E-4,4.2724609375E-4,3.96728515625E-4,3.96728515625E-4,3.96728515625E-4,3.662109375E-4,3.96728515625E-4,3.0517578125E-4,2.44140625E-4,3.0517578125E-4,3.0517578125E-4,3.96728515625E-4,4.8828125E-4,6.103515625E-4,4.2724609375E-4,2.44140625E-4,3.662109375E-4,2.74658203125E-4,6.103515625E-5,1.8310546875E-4,1.220703125E-4,6.103515625E-5,1.220703125E-4,0.0,3.0517578125E-5,6.103515625E-5,1.8310546875E-4,1.220703125E-4,1.220703125E-4,1.8310546875E-4,3.0517578125E-4,3.662109375E-4,3.662109375E-4,4.8828125E-4,5.18798828125E-4,4.2724609375E-4,3.0517578125E-4,2.44140625E-4,1.220703125E-4,0.0,0.0,3.0517578125E-5,3.0517578125E-5,3.662109375E-4,3.96728515625E-4,5.18798828125E-4,5.18798828125E-4,4.8828125E-4,5.4931640625E-4,4.8828125E-4,3.96728515625E-4,6.103515625E-4,5.4931640625E-4,4.2724609375E-4,5.18798828125E-4,3.96728515625E-4,3.96728515625E-4,2.74658203125E-4,2.74658203125E-4,1.52587890625E-4,1.220703125E-4,1.220703125E-4,6.103515625E-5,6.103515625E-5,3.0517578125E-5,1.220703125E-4,3.0517578125E-5,1.52587890625E-4,6.103515625E-5,1.220703125E-4,6.103515625E-5,0.0,-9.1552734375E-5,-2.74658203125E-4,-6.103515625E-5,-9.1552734375E-5,-9.1552734375E-5,1.52587890625E-4,2.74658203125E-4,2.74658203125E-4,3.96728515625E-4,3.662109375E-4,3.0517578125E-4,2.44140625E-4,2.44140625E-4,3.0517578125E-4,2.44140625E-4,3.662109375E-4,4.8828125E-4,4.2724609375E-4,2.44140625E-4,1.220703125E-4,0.0,-9.1552734375E-5,-1.8310546875E-4,-3.0517578125E-4,-2.74658203125E-4,-2.13623046875E-4,-9.1552734375E-5,-6.103515625E-5,6.103515625E-5,6.103515625E-5,0.0,3.0517578125E-5,-1.52587890625E-4,-1.52587890625E-4,-9.1552734375E-5,-6.103515625E-5,-1.8310546875E-4,-4.2724609375E-4,-4.2724609375E-4,-5.4931640625E-4,-4.2724609375E-4,-3.0517578125E-4,-3.96728515625E-4,-3.35693359375E-4,-1.8310546875E-4,-1.8310546875E-4,-1.52587890625E-4,-1.8310546875E-4,-2.13623046875E-4,-9.1552734375E-5,-1.8310546875E-4,-2.74658203125E-4,-2.74658203125E-4,-3.0517578125E-4,-2.13623046875E-4,-1.8310546875E-4,-6.103515625E-5,1.220703125E-4,1.220703125E-4,1.8310546875E-4,2.44140625E-4,3.0517578125E-4,2.74658203125E-4,1.8310546875E-4,0.0,-1.52587890625E-4,-3.35693359375E-4,-4.57763671875E-4,-5.18798828125E-4,-3.35693359375E-4,-1.8310546875E-4,-9.1552734375E-5,1.220703125E-4,1.52587890625E-4,1.220703125E-4,1.220703125E-4,3.0517578125E-5,-1.52587890625E-4,-3.0517578125E-4,-3.96728515625E-4,-3.96728515625E-4,-5.4931640625E-4,-4.57763671875E-4,-4.57763671875E-4,-4.2724609375E-4,-1.8310546875E-4,-9.1552734375E-5,1.8310546875E-4,1.8310546875E-4,3.0517578125E-5,3.0517578125E-5,3.0517578125E-5,-2.74658203125E-4,-4.57763671875E-4,-5.18798828125E-4,-4.2724609375E-4,-3.0517578125E-4,-9.1552734375E-5,-6.103515625E-5,-2.74658203125E-4,-3.35693359375E-4,-5.4931640625E-4,-5.79833984375E-4,-5.18798828125E-4,-3.96728515625E-4,-4.2724609375E-4,-5.18798828125E-4,-6.7138671875E-4,-9.46044921875E-4,-0.001068115234375,-0.00115966796875,-0.001190185546875,-0.00103759765625,-0.001007080078125,-8.85009765625E-4,-6.7138671875E-4,-5.4931640625E-4,-4.2724609375E-4,-4.2724609375E-4,-3.96728515625E-4,-4.2724609375E-4,-3.96728515625E-4,-3.0517578125E-4,-2.74658203125E-4,-9.1552734375E-5,-9.1552734375E-5,3.0517578125E-5,6.103515625E-5,6.103515625E-5,0.0,-1.8310546875E-4,-1.8310546875E-4,-1.52587890625E-4,-3.0517578125E-4,-4.2724609375E-4,-3.35693359375E-4};
                float[] outputScores = new float[1];
                String[] outputScoresNames = new String[]{"net_output"};


                if (FirstFrameLength > 0 || Inferance_Buffer.size() > 0) {


                    if (FirstFrameLength > 0) {

                        int ShiftLength = FirstFrameLength - Recording_Window_hop_Legth;
                        if (ShiftLength < 0)
                            ShiftLength = 0;

                        // Left shift audio data by hop length
                        System.arraycopy(inputBuffer, Recording_Window_hop_Legth, inputBuffer, 0, ShiftLength);
                        FirstFrameLength = ShiftLength;


                        SimpleDateFormat simpleDateFormat =
                                new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

                        Calendar calendar = Calendar.getInstance();
                        Date now = calendar.getTime();
                        String timestamp = simpleDateFormat.format(now);

                        //append new data  frames
                        while (Inferance_Buffer.size() > 0 && (FirstFrameLength + Inferance_Buffer.get(0).length < inputBuffer.length)) {
//
                                String filepath = GlobalContext.context.getExternalFilesDir(null).getPath();
                FileOutputStream AniRecPath = null;



                File myFile = new File(filepath+"/BufRecord_"+timestamp+".pcm");


                try {
                    AniRecPath = new FileOutputStream(filepath+"/BufRecord_"+timestamp+".pcm", true);
                    for(int i=0; i<Inferance_Buffer.get(0).length;i++)
                    {
                        AniRecPath.write(new byte[]{(byte)(Inferance_Buffer.get(0)[i] >> 8 & 0xFF),(byte)(Inferance_Buffer.get(0)[i] & 0xFF) });
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }


                try {
                    AniRecPath.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }


                            System.arraycopy(Inferance_Buffer.get(0), 0, inputBuffer, FirstFrameLength, Inferance_Buffer.get(0).length);
                            FirstFrameLength = FirstFrameLength + Inferance_Buffer.get(0).length;

                            Inferance_Buffer.remove(0);
                        }


                    } else {
                        System.arraycopy(Inferance_Buffer.get(0), 0, inputBuffer, 0, Inferance_Buffer.get(0).length);

                        FirstFrameLength = Inferance_Buffer.get(0).length;
                    }


                } else if (IsPerformVoiceInferance == false) {
                    shouldContinueRecognition = false;
                    break;
                }

                if (FirstFrameLength > Recording_Window_Sliding_Legth) {
                    // We need to feed in float values between -1.0 and 1.0, so divide the
                    // signed 16-bit inputs.
                    for (int i = 0; i < Recording_Window_Sliding_Legth; i++) {
                        doubleInputBuffer[i] = inputBuffer[i] / 32768.0;
                    }

                    float[] mfccInput = mfccConvert.process(doubleInputBuffer);
                    System.arraycopy(mfccBuffer, 13, mfccBuffer, 0, mfccBuffer.length - 13);
                    System.arraycopy(mfccInput, 0, mfccBuffer, mfccBuffer.length - 13, mfccInput.length);


                    // Log.v(LOG_TAG, "MFCC Input======> " + Arrays.toString(mfccBuffer));

                    try {
                        // Run the model.

                        inferenceInterface.feed("net_input", mfccBuffer, 1, 29, 13);
                        inferenceInterface.run(outputScoresNames);
                        inferenceInterface.fetch("net_output", outputScores);


                    } catch (Exception e) {
                        Log.e("Tensorflow Inferance", e.getMessage());
                    }
                    Log.v("WAKE-WORD", "outputScores======> " + outputScores[0]);
                    if (outputScores[0] > 0.1) {
                        AccuracyCounter++;

                        Log.v("WAKE-WORD", "ACC Counter======> " + AccuracyCounter);
                        if (AccuracyCounter >= 2) {
                            StopVoiceInferance();
                            shouldContinueRecognition = false;
                            if (speechDelegate != null)
                                speechDelegate.DetectedWakeWord();
                            break;
                        }
                    }


                }


            }
        }
        catch (Exception e)
        {

            Log.e("WAKE-WORD", e.getMessage());
        }
        IsSearchingWakeWord  =false;


        Log.v("WAKE-WORD", "End recognition.");
    }


    //End of Wake Word Detection



    public  void StopVoiceInferance()
    {
        IsPerformVoiceInferance = false;
    }



public void StartRecording()
        {
            IsPerformRecording = true;
        if (state == State.INITIALIZING)
        {

            int CurrentState =  audioRecorder.getState();


            audioRecorder.startRecording();


        state = State.RECORDING;
        One_Sec_Buffer = new ArrayList<>();
        Inferance_Buffer = new ArrayList<>();
        audioBufferingThread = new Thread()
        {
        public void run()
        {


            boolean ShouldAppendOneSec = true;
            while (IsPerformRecording) {
                //Here You can read your Audio Buffers
                int numberOfReadBytes = audioRecorder.read(audioBuffer, 0, bufferSize/2);


                recordingBufferLock.lock();
                System.arraycopy(audioBuffer, 0, recordingBuffer, recordingOffset, numberOfReadBytes);

                recordingOffset += numberOfReadBytes;
                try {
                    if (recordingOffset >= Recording_Window_Sliding_Legth) {
                        short[] inputBuffer = new short[recordingOffset];
                        System.arraycopy(recordingBuffer, 0, inputBuffer, 0, recordingOffset);
                        recordingOffset = 0;

                        if (IsPerformVoiceInferance) {
                            if (ShouldAppendOneSec) {
                                int Size = One_Sec_Buffer.size();
                                if (Size > 20) {
                                    int LastIndex = One_Sec_Buffer.size() - 1;
                                    Inferance_Buffer.addAll(One_Sec_Buffer.subList(LastIndex - 20, LastIndex));
                                } else {
                                    Inferance_Buffer.addAll(One_Sec_Buffer);
                                }
                                One_Sec_Buffer.clear();
                                ShouldAppendOneSec = false;
                            }
                            //chunks of audio samples for 0.1sec or more time period
                            Inferance_Buffer.add(inputBuffer);

                        } else {
                            ShouldAppendOneSec = true;
                            One_Sec_Buffer.add(inputBuffer);
                            if (One_Sec_Buffer.size() > 20) {
                                One_Sec_Buffer.remove(0);
                            }
                        }
                    }
                } finally {
                    recordingBufferLock.unlock();
                }
//                if (numberOfReadBytes > 0) {
//                    if (IsPerformVoiceInferance) {
//                        if (ShouldAppendOneSec) {
//                            int Size = One_Sec_Buffer.size();
//                            if (Size > 40) {
//                                int LastIndex = One_Sec_Buffer.size() - 1;
//                                Inferance_Buffer.addAll(One_Sec_Buffer.subList(LastIndex - 40, LastIndex));
//                            } else {
//                                Inferance_Buffer.addAll(One_Sec_Buffer);
//                            }
//                            One_Sec_Buffer.clear();
//                            ShouldAppendOneSec = false;
//                        }
//
//                        Inferance_Buffer.add(audioBuffer.clone());
//
//                    } else {
//                        ShouldAppendOneSec = true;
//                        One_Sec_Buffer.add(audioBuffer.clone());
//                        SavedAudioSampleCount++;
//                        if (SavedAudioSampleCount > 40 && One_Sec_Buffer.size() > 0) {
//                            One_Sec_Buffer.remove(0);
//                        }
//                    }
//                }
            }

            One_Sec_Buffer.clear();
        }
        };

        audioBufferingThread.setPriority(Thread.MAX_PRIORITY);

        audioBufferingThread.start();
        }
        else
        {
        Log.e(AudioRecorder.class.getName(), "StartRecording() called on illegal state");

        state = State.ERROR;
        }

        }

public void StopRecording()
{
        if (state == State.RECORDING)
        {

            IsPerformRecording = false;


                try {
                    if(audioRecorder != null)
                    audioRecorder.stop();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if(audioRecorder != null)
                    audioRecorder.release();
                } catch (Exception e) {
                    e.printStackTrace();
                }

            audioRecorder = null;


            if(One_Sec_Buffer != null)
            {
                One_Sec_Buffer.clear();
            }
            if(Inferance_Buffer != null)
            {
                Inferance_Buffer.clear();
            }
            System.gc();

            state = State.STOPPED;

        }
        else
        {
            Log.e(AudioRecorder.class.getName(), "StopRecording() called on illegal state");

            state = State.ERROR;
        }
}

public void release()
        {
        if (state == State.RECORDING)
        {
        StopRecording();
        }



        }

public void reset()
        {
        try
        {
        if (state != State.ERROR)
        {
        release();
        }
        }
        catch (Exception e)
        {
        Log.e(AudioRecorder.class.getName(), e.getMessage());

        state = State.ERROR;
        }
        }


public State getState()
        {
        return state;
        }




    private void copyWaveFile(String inFilename,String outFilename){
        FileInputStream in = null;
        FileOutputStream out = null;
        long totalAudioLen = 0;
        long totalDataLen = totalAudioLen + 36;
        long longSampleRate = 16000;
        int channels = 1;
        long byteRate = 16 * 16000 * channels/8;

        byte[] data = new byte[bufferSize];

        try {
            in = new FileInputStream(inFilename);
            out = new FileOutputStream(outFilename);
            totalAudioLen = in.getChannel().size();
            totalDataLen = totalAudioLen + 36;

           // AppLog.logString("File size: " + totalDataLen);

            WriteWaveFileHeader(out, totalAudioLen, totalDataLen,
                    longSampleRate, channels, byteRate);

            while(in.read(data) != -1){
                out.write(data);
            }

            in.close();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void WriteWaveFileHeader(
            FileOutputStream out, long totalAudioLen,
            long totalDataLen, long longSampleRate, int channels,
            long byteRate) throws IOException {

        byte[] header = new byte[44];

        header[0] = 'R'; // RIFF/WAVE header
        header[1] = 'I';
        header[2] = 'F';
        header[3] = 'F';
        header[4] = (byte) (totalDataLen & 0xff);
        header[5] = (byte) ((totalDataLen >> 8) & 0xff);
        header[6] = (byte) ((totalDataLen >> 16) & 0xff);
        header[7] = (byte) ((totalDataLen >> 24) & 0xff);
        header[8] = 'W';
        header[9] = 'A';
        header[10] = 'V';
        header[11] = 'E';
        header[12] = 'f'; // 'fmt ' chunk
        header[13] = 'm';
        header[14] = 't';
        header[15] = ' ';
        header[16] = 16; // 4 bytes: size of 'fmt ' chunk
        header[17] = 0;
        header[18] = 0;
        header[19] = 0;
        header[20] = 1; // format = 1
        header[21] = 0;
        header[22] = (byte) channels;
        header[23] = 0;
        header[24] = (byte) (longSampleRate & 0xff);
        header[25] = (byte) ((longSampleRate >> 8) & 0xff);
        header[26] = (byte) ((longSampleRate >> 16) & 0xff);
        header[27] = (byte) ((longSampleRate >> 24) & 0xff);
        header[28] = (byte) (byteRate & 0xff);
        header[29] = (byte) ((byteRate >> 8) & 0xff);
        header[30] = (byte) ((byteRate >> 16) & 0xff);
        header[31] = (byte) ((byteRate >> 24) & 0xff);
        header[32] = (byte) (2 * 16 / 8); // block align
        header[33] = 0;
        header[34] = 16; // bits per sample
        header[35] = 0;
        header[36] = 'd';
        header[37] = 'a';
        header[38] = 't';
        header[39] = 'a';
        header[40] = (byte) (totalAudioLen & 0xff);
        header[41] = (byte) ((totalAudioLen >> 8) & 0xff);
        header[42] = (byte) ((totalAudioLen >> 16) & 0xff);
        header[43] = (byte) ((totalAudioLen >> 24) & 0xff);

        out.write(header, 0, 44);
    }



//                String filepath = Environment.getExternalStorageDirectory().getPath();
//                FileOutputStream AniRecPath = null;
//
//                File myFile = new File(filepath+"/BufRecord.pcm");
//                if(myFile.exists())
//                    myFile.delete();
//
//                try {
//                    AniRecPath = new FileOutputStream(filepath+"/BufRecord.pcm");
//                } catch (FileNotFoundException e) {
//                    e.printStackTrace();
//                }


//                try {
//                    AniRecPath.close();
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
}

